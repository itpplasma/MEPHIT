//
// Helmholtz equation for a single Fourier harmonic in toroidal angle
//
// C. Albert, July 2019
//
//

include "helmholtz.idp"  // config (incl. filenames)

mesh Th = readmesh(meshfile);

fespace Vh0(Th, P0);
fespace Vh1(Th, P1);

Vh0 lam;
Vh0 <complex> rho;
Vh1 <complex> phi, psi;

// count triangles in internal region 0
int ntri = 0;
for (int k = 0; k < Th.nt; k++) {
  if (Th[k].label == 0)
    ntri++;
}

cout << "Number of triangles in internal region: " << ntri << endl;

ifstream lamf(lamfile);
ifstream rhof(rhofile);

rho = 0.0 + 0.0i;
lam = 0.0;
for (int k = 0; k < ntri; k++) {
  real rhoRe, rhoIm;
  lamf >> lam[][k];
  rhof >> rhoRe >> rhoIm;
  rho[][k] = rhoRe + 1.0i*rhoIm; 
}

solve Helmholtz(phi, psi, solver = UMFPACK) =               // defines the PDE
  - int2d(Th)(x * (dx(psi) * dx(phi) + dy(psi) * dy(phi)))  // Laplacian
  + int2d(Th)(x * psi * (lam - nmode^2) * phi )             // Helmholtz + harmonic part
  - int2d(Th)(x * psi * rho);                               // Sources

ofstream ofile("phi.dat");
ofile.scientific.precision(16);
for (int k = 0; k < ntri; k++) {
  ofile << real(psi[][k]) << imag(psi[][k]) << endl;
}

if (doplot) {
  real plotvar;
  plotvar = lam; plot(plotvar, wait = true, value = true);
  plotvar = real(rho); plot(plotvar, wait = true, value = true);
  plotvar = imag(rho); plot(plotvar, wait = true, value = true);
  plotvar = real(phi); plot(plotvar, wait = true, value = true);
  plotvar = imag(phi); plot(plotvar, wait = true, value = true);
}

