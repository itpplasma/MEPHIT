//
// Magnetostatics with Fourier modes in toroidal angle
//
// C. Albert, July 2016
//
//

real c = 29979245800.0; // speed of light

real n = 2.0; // mode number

include "magdif.idp"  // config (incl. filenames)

mesh Th = readmesh(meshfile);

fespace Vh0(Th, P0);
fespace Vh1(Th, P1);
fespace Vh2(Th, P2);
fespace Hrot(Th, RT0Ortho);
fespace Hdiv(Th, RT0);

Hrot [axRe, ayRe], [axIm, ayIm], [wx, wy];
Hdiv [JrRe, JzRe], [JrIm, JzIm], [BrRe, BzRe], [BrIm, BzIm];
Vh0 BphiRe, BphiIm, JphiRe, JphiIm;
Vh0 brRe, brIm, bzRe, bzIm; // output on triangle faces

JrRe[] = 0.0;
JrIm[] = 0.0;

// count triangles in internal region 0
int nti = 0;
for (int k = 0; k < Th.nt; k++) {
  if (Th[k].label == 0)
    nti++;
}

ifstream ifile(currnfile);
for (int k = 0; k < nti; k++) {
  for (int j = 0; j < 3; j++) {
    ifile >> JrRe[][Hdiv(k, j)] >> JrIm[][Hdiv(k, j)];
    // check orientation of edges and assign
    // normal flux coordinate accordingly
    if ((Th[k][(j+2) % 3] - Th[k][(j+1) % 3]) < 0) {
      JrRe[][Hdiv(k, j)] = -JrRe[][Hdiv(k, j)];
      JrIm[][Hdiv(k, j)] = -JrIm[][Hdiv(k, j)];
    }
  }
  ifile >> JphiRe[][k] >> JphiIm[][k];
}
// Check:
// JphiRe = -(dx(JrIm) + dy(JzIm)) / n;
// JphiIm = (dx(JrRe) + dy(JzRe)) / n;

solve AmpereRe([axRe, ayRe], [wx, wy], solver = UMFPACK) = // defines the PDE
  int2d(Th)(x * (dx(wy) - dy(wx)) * (dx(axRe) - dy(axRe)))
  + int2d(Th)(n^2 / x * [wx, wy] '* [axRe, ayRe])
  - int2d(Th)(4.0 * pi / c * [wx, wy] '* [JrRe,JzRe])
  + on(1, axRe = 0, ayRe = 0);

solve AmpereIm([axIm, ayIm], [wx, wy], solver = UMFPACK) = // defines the PDE
  int2d(Th)(x * (dx(wy) - dy(wx)) * (dx(ayIm) - dy(axIm)))
  + int2d(Th)(n^2 / x * [wx, wy] '* [axIm, ayIm])
  - int2d(Th)(4.0 * pi / c * [wx, wy] '* [JrIm,JzIm])
  + on(1, axIm = 0, ayIm = 0);

[BrRe, BzRe] = [-n * ayIm, n * axIm];
[BrIm, BzIm] = [n * ayRe, -n * axRe];
BphiRe = -(dx(ayRe) - dy(axRe));
BphiIm = -(dx(ayIm) - dy(axIm));

ofstream ofile(Bnfluxfile);
ofile.scientific.precision(16);
for (int k = 0; k < nti; k++) {
  for (int j = 0; j < 3; j++) {
    if ((Th[k][(j+2) % 3] - Th[k][(j+1) % 3]) > 0) {
      ofile
        << BrRe[][Hdiv(k, j)] << "\t"
        << BrIm[][Hdiv(k, j)] << "\t";
    } else {
      ofile
        << -BrRe[][Hdiv(k, j)] << "\t"
        << -BrIm[][Hdiv(k, j)] << "\t";
    }
  }
  ofile
    << BphiRe[][k] * Th[k].area << "\t"
    << BphiIm[][k] * Th[k].area << endl;
}

if (doplot) {
  plot(Th, wait = true);
  plot([JrRe, JzRe], wait = true, value = true);
  plot([BrRe, BzRe], wait = true, value = true);
  plot(BphiRe, wait = true, fill = true, value = true);
}
