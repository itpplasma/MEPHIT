//
// Magnetostatics with Fourier modes in toroidal angle
//
// C. Albert, July 2016 (initial commit)
// P. Lainer, September 2020 (last change)
//

load "BinaryIO"
load "MUMPS"

real c = 29979245800.0; // speed of light

include "getARGV.idp"
string edgefile = "edgemap.dat";
string datapipe = getARGV("-P", "maxwell.dat");
bool doplot = false;
int nRichardson = 3;  // number of Richardson iterations

int runmode = 0, nmode = 2, nedge = 0, npoint = 0, state = 0;
LoadFlag(nmode, datapipe);
flag(nmode, datapipe);
LoadFlag(nedge, datapipe);
flag(nedge, datapipe);
LoadFlag(npoint, datapipe);
flag(npoint, datapipe);
LoadFlag(runmode, datapipe);
flag(runmode, datapipe);
if (runmode % 2) {
  LoadFlag(state, datapipe);
  flag(state, datapipe);
  include "extmesh.edp"
}
if (!((runmode / 2) % 2)) {
  exit(0);
}
bool debugprojection = (runmode / 8) % 2;
mesh Th = readmesh("maxwell.msh");
// count triangles in internal region 0
int ntri = 0;
for (int k = 0; k < Th.nt; k++) {
  if (Th[k].label == 0)
    ntri++;
}
cout << "Number of triangles in internal region: " << ntri << endl;
fespace Vh1(Th, P1);
fespace Hrot(Th, RT0Ortho);
fespace Hdiv(Th, RT0);
Hrot [ax, ay], [wx, wy], [qx, qy], [resx, resy], [corrx, corry];
// contravariant density components also include metric determinant R
Hdiv [ReJR, ReJZ], [ImJR, ImJZ], [ReBR, ReBZ], [ImBR, ImBZ];
Vh1 ReP1AR, ImP1AR, ReP1AZ, ImP1AZ;
Vh1 ReJnparB0, ImJnparB0, B0R, B0P, B0Z, B0mod;

int[int] edgemap(nedge), signmap(nedge);
{
  ifstream in(edgefile);
  int ke, ktri;
  for (int kedge = 0; kedge < nedge; kedge++) {
    in >> ktri >> ke;
    // ke and ktri are one-based indices and edge numbering is shifted by one
    edgemap[kedge] = Hdiv(ktri - 1, (abs(ke) + 1) % 3);
    // the sign of ke indicates when edge orientation differs in FreeFem
    signmap[kedge] = (ke > 0) ? 1 : -1;
  }
}
real[int] edgedata(2 * nedge);    // (Re, Im) of RT0 DoFs
real[int] pointdata(2 * npoint);  // (Re, Im) of P1 DoFs
macro deserializeRT0(polRe, polIm)
for (int k = 0; k < nedge; k++) {
  polRe[][edgemap[k]] = signmap[k] * edgedata[2 * k];
  polIm[][edgemap[k]] = signmap[k] * edgedata[2 * k + 1];
}
// end macro deserializeRT0
macro serializeRT0(polRe, polIm)
for (int k = 0; k < nedge; k++) {
  edgedata[2 * k] = signmap[k] * polRe[][edgemap[k]];
  edgedata[2 * k + 1] = signmap[k] * polIm[][edgemap[k]];
}
// end macro serializeRT0
macro serializeP1(polRe, polIm)
for (int k = 0; k < npoint; k++) {
  pointdata[2 * k] = polRe[][k];
  pointdata[2 * k + 1] = polIm[][k];
}
// end macro serializeP1

real[int] integral(1);  // for SaveVec
// note that the metric determinant x = R is already contained in the input data
// for J, but not in A
varf Ampere([ax, ay], [wx, wy]) = // defines the PDE
  int2d(Th)(x * (dx(wy) - dy(wx)) * (dx(ay) - dy(ax)))
  + int2d(Th)(nmode^2 / x * (wx * ax + wy * ay))
  + on(2, ax = 0, ay = 0);
matrix L = Ampere(Hrot, Hrot, solver = sparsesolver);
varf rhsRe([dumx, dumy], [wx, wy]) =
  int2d(Th)(4.0 * pi / c * (wx * ReJR + wy * ReJZ))
  + on(2, dumx = 0, dumy = 0);
varf rhsIm([dumx, dumy], [wx, wy]) =
  int2d(Th)(4.0 * pi / c * (wx * ImJR + wy * ImJZ))
  + on(2, dumx = 0, dumy = 0);
state = 0;
int loopcount = 0;
while (state != -3) {
  LoadFlag(state, datapipe);
  flag(state, datapipe);
  if (state == -1) {
    loopcount++;
    // Ampere solver
    LoadVec(edgedata, datapipe);
    [ReJR, ReJZ] = [0.0, 0.0];
    [ImJR, ImJZ] = [0.0, 0.0];
    deserializeRT0(ReJR, ImJR);

    if (debugprojection) {
      ReJnparB0 = 0.0;
      ImJnparB0 = 0.0;
      B0R = 0.0;
      B0P = 0.0;
      B0Z = 0.0;
      B0mod = 0.0;
      {
        ifstream in("/tmp/jnpar_B0.dat");
        for (int kpoi = 0; kpoi < npoint; kpoi++) {
          in >> ReJnparB0[][kpoi] >> ImJnparB0[][kpoi];
        }
      }
      {
        ifstream in("/tmp/B0.dat");
        for (int kpoi = 0; kpoi < npoint; kpoi++) {
          in >> B0R[][kpoi] >> B0P[][kpoi] >> B0Z[][kpoi] >> B0mod[][kpoi];
        }
      }
      [ReJR, ReJZ] = [ReJR + ReJnparB0 * B0R, ReJZ + ReJnparB0 * B0Z];
      [ImJR, ImJZ] = [ImJR + ImJnparB0 * B0R, ImJZ + ImJnparB0 * B0Z];
    }

    // real part
    qx[] = rhsRe(0, Hrot);
    ax[] = L^-1 * qx[];
    for (int k = 0; k < nRichardson; k++) {
      resx[] = L * ax[];
      resx[] -= qx[];
      if (k + 1 == nRichardson && loopcount == 1) {
        plot(qx, wait = true, value = true, fill = true);
        plot(resx, wait = true, value = true, fill = true);
        plot(qy, wait = true, value = true, fill = true);
        plot(resy, wait = true, value = true, fill = true);
      }
      corrx[] = L^-1 * resx[];
      ax[] -= corrx[];
    }
    [ImBR, ImBZ] = [nmode * ay, -nmode * ax];
    ReP1AR = ax;
    ReP1AZ = ay;
    if (doplot) {
      plot(ax, wait = true, value = true, fill = true);
      plot(ReP1AR, wait = true, value = true, fill = true);
      plot(ay, wait = true, value = true, fill = true);
      plot(ReP1AZ, wait = true, value = true, fill = true);
    }
    // imaginary part
    qx[] = rhsIm(0, Hrot);
    ax[] = L^-1 * qx[];
    for (int k = 0; k < nRichardson; k++) {
      resx[] = L * ax[];
      resx[] -= qx[];
      if (k + 1 == nRichardson && loopcount == 1) {
        plot(qx, wait = true, value = true, fill = true);
        plot(resx, wait = true, value = true, fill = true);
        plot(qy, wait = true, value = true, fill = true);
        plot(resy, wait = true, value = true, fill = true);
      }
      corrx[] = L^-1 * resx[];
      ax[] -= corrx[];
    }
    [ReBR, ReBZ] = [-nmode * ay, nmode * ax];
    ImP1AR = ax;
    ImP1AZ = ay;
    if (doplot) {
      plot(ax, wait = true, value = true, fill = true);
      plot(ImP1AR, wait = true, value = true, fill = true);
      plot(ay, wait = true, value = true, fill = true);
      plot(ImP1AZ, wait = true, value = true, fill = true);
    }
    // output
    serializeRT0(ReBR, ImBR);
    SaveVec(edgedata, datapipe);
    serializeP1(ReP1AR, ImP1AR);
    SaveVec(pointdata, datapipe);
    serializeP1(ReP1AZ, ImP1AZ);
    SaveVec(pointdata, datapipe);
  } else if (state == -2) {
    // convergenve estimation
    LoadVec(edgedata, datapipe);
    [ReBR, ReBZ] = [0.0, 0.0];
    [ImBR, ImBZ] = [0.0, 0.0];
    deserializeRT0(ReBR, ImBR);
    integral[0] = sqrt(int2d(Th, 0, qforder=4)(ReBR * ReBR + ImBR * ImBR + ReBZ * ReBZ + ImBZ * ImBZ));
    SaveVec(integral, datapipe);
  }
}
