ofstream checkfile("connectivity.dat");
checkfile.scientific.precision(16);
for (int k = 0; k < ntri; k++) {
  for (int j = 0; j < 3; j++) {
    if (j > 0) {
      checkfile << "\t";
    }
    checkfile << Hdiv(k, (j+2) % 3);
  }
  checkfile << "\n";
}

ofstream checkfile("ff_currn_check.dat");
checkfile.scientific.precision(16);
for (int k = 0; k < ntri; k++) {
  for (int j = 0; j < 3; j++) {
    if ((Th[k][(j+1) % 3] - Th[k][(j+0) % 3]) > 0) {
      checkfile
        << real(Jr[][Hdiv(k, (j+2) % 3)]) << "\t"
        << imag(Jr[][Hdiv(k, (j+2) % 3)]) << "\t";
    } else {
      checkfile
        << -real(Jr[][Hdiv(k, (j+2) % 3)]) << "\t"
        << -imag(Jr[][Hdiv(k, (j+2) % 3)]) << "\t";
    }
  }
  checkfile
    << real(Jphi[][k]) * Th[k].area << "\t"
    << imag(Jphi[][k]) * Th[k].area << endl;
}


real Rk, Zk;
int kt;
ofstream ffBn("ff_Bn.dat");
ffBn.scientific.precision(15);
ofstream ffjn("ff_currn.dat");
ffjn.scientific.precision(15);
for (kt = 0; kt < ktlownflux; kt++) {
  if (kt < 200 || (kt % 2 == 0)) {
    Rk = 0.25 * Th[kt][0].x + 0.25 * Th[kt][1].x + 0.5 * Th[kt][2].x;
    Zk = 0.25 * Th[kt][0].y + 0.25 * Th[kt][1].y + 0.5 * Th[kt][2].y;
  } else {
    Rk = 0.5 * Th[kt][0].x + 0.25 * Th[kt][1].x + 0.25 * Th[kt][2].x;
    Zk = 0.5 * Th[kt][0].y + 0.25 * Th[kt][1].y + 0.25 * Th[kt][2].y;
  }
  ffBn << Rk << "\t" << Zk << "\t"
       << real(Br(Rk, Zk)) << "\t" << imag(Br(Rk, Zk)) << "\t"
       << real(Bz(Rk, Zk)) << "\t" << imag(Bz(Rk, Zk)) << "\t"
       << real(Bphi(Rk, Zk)) << "\t" << imag(Bphi(Rk, Zk)) << endl;
  ffjn << Rk << "\t" << Zk << "\t"
       << real(Jr(Rk, Zk)) << "\t" << imag(Jr(Rk, Zk)) << "\t"
       << real(Jz(Rk, Zk)) << "\t" << imag(Jz(Rk, Zk)) << "\t"
       << real(Jphi(Rk, Zk)) << "\t" << imag(Jphi(Rk, Zk)) << endl;
}
for (kt = ktlownflux; kt < ntri; kt++) {
  ffBn << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << endl;
  ffjn << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << "\t" << 0.0 << endl;
}
